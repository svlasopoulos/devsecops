// build stage
node ('Ubuntu-app-agent'){  
	def app
    try {
	   notifyBuild('STARTED')			
		stage('Cloning Git') {
			/* Let's make sure we have the repository cloned to our workspace */
            		checkout scm
		}  
     
		stage('SAST') {
			build 'SECURITY-SAST-SNYK'
		}   
          
		stage('Build-and-Tag') {
			/* This builds the actual image; synonymous to
			 * docker build on the command line */
			app = docker.build("svla299/snake")
		}
 
		stage('Post-to-dockerhub') { 
			/*docker.withRegistry("https://registry.hub.docker.com", 'svla_docker') {*/
			docker.withRegistry("", 'svla_docker') {
				app.push("latest")
			}
		}
		
		stage('SECURITY-IMAGE-SCANNER'){
			build 'SECURITY-CONTAINER-Aqua-Microscanner'
		}

		stage('Pull-image-server') {
			/*sh "docker-compose down"*/
			sh 'docker rmi $(docker images -q -f dangling=true) || true'
			sh 'docker container stop $(docker container ls -aq) || true'
			sh 'docker container rm $(docker container ls -aq) || true'
			sh 'docker-compose -f ~/app-test/node-multiplayer-snake/docker-compose.yml up -d'	
		}							
		
		stage('DAST') {
			build 'SECURITY-DAST-OWASP_ZAP'
		}	
		/* ... existing build steps ... */
   } catch (e) {
     // If there was an exception thrown, the build failed
     currentBuild.result = "FAILED"
     throw e
   } finally {
     // Success or failure, always send notifications
     notifyBuild(currentBuild.result)
   }
}

def notifyBuild(String buildStatus = 'STARTED') {
	// build status of null means successful
	buildStatus =  buildStatus ?: 'SUCCESSFUL'
 
	// Default values
	def colorName = 'RED'
	def colorCode = '#FF0000'
	def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
	def summary = "${subject} (${env.BUILD_URL})"
	def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    	<p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""

	// Override default values based on build status
	if (buildStatus == 'STARTED') {
		color = 'YELLOW'
		colorCode = '#FFFF00'
	} else if (buildStatus == 'SUCCESSFUL') {
		color = 'GREEN'
		colorCode = '#00FF00'
	} else {
		color = 'RED'
		colorCode = '#FF0000'
	}
 
	// Send notifications
	slackSend (color: colorCode, message: summary)
 
	emailext (
		subject: subject,
		body: details,
	    mimeType: 'text/html',
		// recipientProviders: [[$class: 'DevelopersRecipientProvider']]
	    to: 'svlasopoulos@gmail.com'
    )
}
